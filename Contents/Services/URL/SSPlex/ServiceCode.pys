from ss import Consumer
from ss import Wizard
from ss import util

from urlparse import urlparse
import cgi

def NormalizeURL(url):
    return url

def MetadataObjectForURL(url):
    co = VideoClipObject(
        title   = 'foo',
        summary = 'bar'
    )

    return co

class SSPlexEnvironment:
    def log(self,   message):               Log(message)
    def json(self,  payload_url, **params): return JSON.ObjectFromURL(payload_url, values = params)
    def css(self,   haystack,    selector): return HTML.ElementFromString(haystack).cssselect(selector)
    def xpath(self, haystack,    query):    return HTML.ElementFromString(haystack).xpath(query)

#@deferred
def MediaObjectsForURL(url):
    nil, nil, path, nil, query, nil = urlparse(url)
    params   = cgi.parse_qs(query)

    if   '/procedure' == path: obj = mo(PlayConsumer, url      = params['url'][0])
    elif '/wizard'    == path: obj = mo(PlayWizard,   endpoint = params['endpoint'][0])
    elif '/translate' == path: obj = mo(PlayForeign,  original = params['original'][0], foreign = params['foreign'][0])

    return [ obj ]

found = None
@indirect
def PlayWizard(endpoint):
    wizard   = Wizard(endpoint, environment = SSPlexEnvironment())

    def first_working(consumer):
        global found
        consumer.consume()
        found = consumer

    wizard.sources(first_working)

    if found: return video(found)
    else: raise Exception('no sources found.')

@indirect
def PlayConsumer(url):
    consumer = Consumer(url, environment = SSPlexEnvironment())
    return video(consumer)

@indirect
def PlayForeign(original, foreign):
    response = JSON.ObjectFromURL( util.translate_endpoint(original, foreign) )
    url      = util.translated_from(response)
    consumer = Consumer(url, environment = SSPlexEnvironment())

    return video(consumer)

def video(consumer):
    consumer.consume()

    referer = consumer.url
    cookies = consumer.agent_cookie_string()
    agent   = consumer.ua

    container = ObjectContainer(user_agent = agent, http_cookies = cookies)
    container.http_headers = { 'Referer': referer }
    naitive = VideoClipObject(
        items = [ MediaObject(
            parts = [ PartObject(key = consumer.asset_url()) ],
        ) ]
    )
    container.add(naitive)

    return container

def mo(cb, **kwargs):
    return MediaObject(
        parts = [ PartObject( key = Callback(cb, **kwargs) ) ],
    )
