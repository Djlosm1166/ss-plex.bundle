import common
ss = common.init_ss()

from urlparse import urlparse
import cgi

def NormalizeURL(url): return url

def MetadataObjectForURL(url):
    nil, nil, path, nil, query, nil = urlparse(url)
    params   = cgi.parse_qs(query)
    endpoint = params['endpoint'][0]
    wizard   = ss.Wizard(endpoint)

    co = VideoClipObject(
        title   = wizard.file_hint,
        summary = wizard.payload['resource']['display_overview'],
        thumb   = wizard.payload['resource']['artwork']
    )

    return co

#@deferred
def MediaObjectsForURL(url):
    nil, nil, path, nil, query, nil = urlparse(url)
    params = cgi.parse_qs(query)

    if   '/procedure' == path: obj = mo(PlayConsumer, url      = params['url'][0])
    elif '/wizard'    == path: obj = mo(PlayWizard,   endpoint = params['endpoint'][0], avoid_flv = params['avoid_flv'][0])
    elif '/translate' == path: obj = mo(PlayForeign,  original = params['original'][0], foreign   = params['foreign'][0])

    return [ obj ]

@indirect
def PlayWizard(endpoint, avoid_flv = 0):
    wizard = ss.Wizard(endpoint, avoid_flv = bool(int(avoid_flv)))

    def first_working(consumer): consumer.asset_url
    wizard.sources(first_working)

    if wizard.consumer: return video(wizard.consumer)
    else:               raise  Ex.MediaNotAvailable

@indirect
def PlayConsumer(url):
    consumer = ss.Consumer(url)
    return video(consumer)

@indirect
def PlayForeign(original, foreign):
    response = JSON.ObjectFromURL( ss.util.translate_endpoint(original, foreign) )
    url      = ss.util.translated_from(response)
    consumer = ss.Consumer(url)

    return video(consumer)

def video(consumer):
    try:
        consumer.consume()
        return IndirectResponse(VideoClipObject, key = consumer.asset_url)

    except Exception, e:
        raise Ex.MediaNotAvailable

    #return IndirectResponse(VideoClipObject,
        #key          = consumer.asset_url(),
        #user_agent   = consumer.ua,
        #http_cookies = consumer.agent_cookie_string(),
        #http_headers = { 'Referer': consumer.url }
    #)

    # Some clients only work with Redirect
    # others (Desktop / aTV2) can use this
    # more advanced way, which properly
    # sets cookies and whatnot
    #referer = consumer.url
    #cookies = consumer.agent_cookie_string()
    #agent   = consumer.ua
    #url     = consumer.asset_url()

    #container = ObjectContainer(user_agent = agent, http_cookies = cookies)
    #container.http_headers = { 'Referer': referer }
    #naitive = VideoClipObject(
        #items = [ MediaObject(
            #parts = [ PartObject(key = url) ],
        #) ]
    #)
    #container.add(naitive)

    #return container

def mo(cb, **kwargs):
    return MediaObject(
        parts = [ PartObject( key = Callback(cb, **kwargs) ) ],
    )
